services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: proxyflow_postgres
    environment:
      POSTGRES_DB: proxyflow
      POSTGRES_USER: proxyuser
      POSTGRES_PASSWORD: proxypass123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - proxyflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U proxyuser"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: proxyflow_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - proxyflow_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ClickHouse Analytics
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: proxyflow_clickhouse
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./clickhouse_schema.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      CLICKHOUSE_DB: proxyflow_analytics
      CLICKHOUSE_USER: clickhouse_user
      CLICKHOUSE_PASSWORD: clickhouse_pass
    networks:
      - proxyflow_network
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  # FastAPI Backend
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    container_name: proxyflow_api
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://proxyuser:proxypass123@postgres:5432/proxyflow
      REDIS_URL: redis://redis:6379/0
      CLICKHOUSE_HOST: clickhouse
      CLICKHOUSE_PORT: 9000
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - proxyflow_network
    volumes:
      - ./app:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Django Backoffice
  django:
    build:
      context: .
      dockerfile: Dockerfile.django
    container_name: proxyflow_backoffice
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql://proxyuser:proxypass123@postgres:5432/proxyflow
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-django-secret-key-change-in-production}
      DJANGO_DEBUG: "False"
      DJANGO_ALLOWED_HOSTS: localhost,127.0.0.1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - proxyflow_network
    volumes:
      - ./backoffice:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn backoffice.wsgi:application --bind 0.0.0.0:8000"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: proxyflow_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - fastapi
      - django
    networks:
      - proxyflow_network

  frontend:
    image: node:18-alpine
    container_name: proxyflow_frontend
    working_dir: /app
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    command: sh -c "npm install && npm run dev"
    networks:
      - proxyflow_network

networks:
  proxyflow_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:


